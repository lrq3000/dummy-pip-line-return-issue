# This workflow will test a downstream dependency to functionally test current (Python) package
# It uses the Python Package GitHub Actions workflow.
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
# and https://www.youtube.com/watch?v=l6fV09z5XHk

name: ci-build-dowstream

on:
  push:
    branches:
      - main # $default-branch only works in Workflows templates, not in Workflows, see https://stackoverflow.com/questions/64781462/github-actions-default-branch-variable
  pull_request:
    branches:
      - main

jobs:
  testdownstream:
    name: Unit test downstream package depending on our package
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.x"]  # check the list of versions: https://github.com/actions/python-versions/releases and https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md -- note that "*" represents the latest stable version of Python
        os: [ windows-2022, windows-2019, ubuntu-latest] #, macos-latest ] # jobs that run on Windows and macOS runners that GitHub hosts consume minutes at 2 and 10 times the rate that jobs on Linux runners consume respectively. But it's free for public OSS repositories.
    steps:
    - uses: actions/checkout@v3  # necessary for setup-python to work, even if we do not use the checked out repo!
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    # You can test your matrix by printing the current Python version
    - name: Display Python version
      run: |
        python -c "import sys; print(sys.version)"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # The rest is managed by the pyproject.toml
    - name: Echo current Python version
      run: echo "${{ matrix.python-version }}"
    - name: Test downstream package depending on reedsolo (pyFileFixity) as complementary functional unit test
      run: |
        mkdir sub
        cd sub  # to avoid conflicts with checked out repo
        pip install --upgrade --editable git+https://github.com/lrq3000/dummypiplinereturnbug.git#egg=dummypiplinereturnbug[test] --verbose
        pytest src/dummypiplinereturnbug
    - name: Get and display files contents (only on failure of previous step)
      id: vars
      if: failure()
      run: |
        format-hex sub/src/dummypiplinereturnbug/src/dummypiplinereturnbug/tests/out/text_file.txt
        format-hex sub/src/dummypiplinereturnbug/src/dummypiplinereturnbug/tests/results/pregen_text_file.txt
        format-hex sub/src/dummypiplinereturnbug/src/dummypiplinereturnbug/tests/out/binary_file.bin
        format-hex sub/src/dummypiplinereturnbug/src/dummypiplinereturnbug/tests/results/pregen_binary_file.bin
      shell: pwsh
